#+TODO: TODO(t!) WAIT(W@/!) | DONE(d!) CANCELED(c@) DELEGATED-AWAY(G@/!)
#+TODO: BUG(b!) WRITE(w) | FIXED(f!) WONTFIX(w!)
#+TITLE: Emacs Course 01

#+AUTHOR: Derek Feichtinger
#+EMAIL: dfeich@gmail.com

# the following property setting is inherited by all org headings
# it is used by an advanced feature for presenting nicer agenda views
# (org-super-agenda)
#+PROPERTY: agenda-group emacs_course

# For starting the course, move your cursor to the line reading
# "Course Basics" and use the <TAB> key to unfold the contents
# of that headline.

* Course basics
  This file is written in Org mode, a very powerful outline and
  productivity mode of Emacs. For starting the course you just need to
  remember that you can unfold/fold the headlines (lines starting with
  a "*") by positioning your cursor on them and then use the <TAB>
  key. Each time you hit <TAB> it cycles through one of three folding
  states.

  The sections below each headline contain subsections with their own
  headlines (lines starting with two stars - you can unfold them as
  well). The subsections contain lists with exercises and often
  feature checkboxes. Go through the exercises, and each time you
  finish an item, you can position your cursor on the respective
  checkbox and type "C-c C-c" (CTRL-c CTRL-c) to mark it done. The
  checkbox will be checked, and Org mode will magically adapt the
  counter at the top. Try it with the following list

 - My list [0/2]
   - [ ] I learned this
   - [ ] I learned that

 OK, now proceed to the first section below, and hack away...
  
* Basic Emacs usage
  Emacs contains an excellent tutorial. You can reach it by using
  the standard key-combo "C-h t". The following exercises only contain a subset
  of commands.
** TODO Loading and saving files [0/4]
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 23:07]
   :END:
   - [ ] the basic way of loading a file uses the standard key-combo "C-x
     C-f" (find-file). You will then be prompted for the file.
     - In this Emacs configuration I have configured
       the *ido* system. This offers you a nicer way of selecting the file
       from candidates based on what you type. It supports some
       fuzzy matching logic (e.g. when you enter "cb" it will show you
       "course-basics" among the hits, since "cb" matches the initials)
     - when you enter "//" it will jump to the root file system.
     - when you enter "~/" it will jump to your home directory
     - if you enter the name of a nonexistent file "[nomatch]" will be displayed,
       if you hit <RETURN> it will offer to create this file as a new file. Confirm
       with a second <RETURN>.
   - [ ] a very powerful file navigation tool is available via the
     helm package in this Emacs configuration. Use the key-combo "<f5> f"
     (helm-find-files).
     - you can use the arrow keys to move up, down, into and out of directories
     - typing will narrow the candidates down according to your search expression
       as you type. It supports fuzzy matching, so if you type "cb" it will match
       "course-basics.org" as well as any file like "cb123.txt".
     - <RETURN> opens the file
     - typing the name of a nonexistent file will offer to create it. If you type
       a nonexistent filename and terminate it by a "/", you will be asked whether
       you want to create that directory.
   - [ ] Save a file buffer after changing it by using the key-combo
     "C-x C-s" (save-buffer)
   - [ ] Save a buffer under another name by using the standard
     key-combo "C-x C-w" (write-file).

** TODO Understanding Emacs windows [0/6]
   Emacs is able to divide up its screen space into logical
   areas. They are called /windows/. It can do this even while running
   on an ASCII terminal. It has nothing to do with the graphical
   window manager within your Emacs session may be running.

   This is a typical source of confusion for new users, because the
   term "window" is normally used for the windows in which your
   graphical window manager (like Gnome or KDE) is running
   applications. In Emacs these "external" windows are called /frames/.
   So, Emacs is running in one or multiple frames provided by your
   window manager, and each frame may contain multiple Emacs windows
   sharing the frame.

   - [ ] split the current window horizontally into 2 windows. Use
     the standard key-combo "C-x 2" (split-window-below)
   - [ ] split the window in which you currently are in two vertical
     windows by using the standard key-combo "C-x 3" (split-window-right)
   - [ ] you can switch to another window by using the standard key-combo
     "C-x o" (other-window). Repeat it to jump to the next window.
   - [ ] you can scroll the "other" window by using the standard
     key-combos "<M-PageUp>" and "<M-PageDown>", or alternatively
     "<C-M-v>" and "<C-M-S-v>" (scroll-other-window). This is very
     practical for scrolling the documentation without leaving the
     current window. It is most useful when you just have two windows
     open.
   - [ ] to make the current window the only window of the frame,
     you can use the standard key-combo "C-x 1" (delete-other-windows)
   - [ ] split the window again using the commands above. You can
     close the window in which the cursor is, by using the standard
     key-combo "C-x 0" (delete-window)

   You can read more about windows management in Emacs by following
   this link [[info:emacs#Windows][info:emacs#Windows]]

** TODO Buffers and switching between them [0/3]
   The text that you see inside of an Emacs window is a view of a /buffer/.
   Often a buffer is associated with a file that you loaded, but there
   are also other buffers, e.g. for displaying messages, testing lisp commands,
   displaying information, etc.

   Usually your Emacs session will host a lot of buffers (I'm often ending up
   with several hundreds for a long running session), and it's important to
   know how to switch between them in your windows.

   - [ ] You can switch to another buffer using the standard key-combo
     "C-x b" (switch-buffer). You will be prompted for the buffer's name.
     In this config we again connected it to the *ido* completion help, so
     you will find the familiar selection interface
   - One of the most flexible ways to switch to another buffer is again by
     invoking the respective helm function that is available in this configuration.
     Use "<f5> b" (helm-buffers-list) to get the helm selection interface that
     you already encountered in the above section for [[*Loading and saving files][Loading and saving files]].
   - [ ] The standard key-combo "C-x C-b" (list-buffers) will show you
     a window with a list of all the current buffers. That is
     sometimes helpful to get an overview. In the course's
     configuration I supercharged it by mapping the key to the
     standard [[help:ibuffer-list-buffers][ibuffer-list-buffers]] command. That mode gives you a
     nicer buffer overview that also can be customized later.
     - You can jump to a buffer by just using <RETURN> when your cursor is on
       it.
   - [ ] One can also switch to the next/previous buffer using the
     standard key-combos "C-x <right>" (next-buffer) and "C-x <left>"
     (previous-buffer). Since I like to do that a lot, they are mapped
     in this cofiguration to "<C-prior>" (this is <C-PageUp>) and
     "<C-next>" (this is <C-PageDown>). These functions allow you to
     switch back to the previous buffers you visited, and forward
     again.
   - You can read about buffers in the [[info:emacs#Buffers][info:emacs#Buffers]] page.

** TODO Moving inside of a buffer
   Emacs provides a lot of ways to move within a buffer.
   I will just list a few of the most important ones

   These are all standard key-combos
   - "M-<" (beg-of-buffer) :: Jumps to the beginning of the buffer
   - "M->" (end-of-buffer) :: Jumps to the end of the buffer
   - "C-a" (move-beginning-of-line) :: move to beginning of line
   - "C-e" (move-end-of-line) :: move to the end of the line
   - "M-g g" (goto-line) :: go to a specific line number
   - "M-g c" (goto-char) :: go to a specific character number within
     the file

   Apart from these commands you can naturally use PageUp, PageDown to
   move fast. A lot of people also like to use the search functions
   that we'll encounter a bit later to navigate over bigger distances
   in the buffer.

** TODO Explainer: Major modes and minor modes
   :LOGBOOK:
   - State "TODO"       from              [2020-06-17 Wed 23:05]
   :END:
   - "Modes" govern the way how emacs deals with a buffer you are
     viewing, and which interface it offers to you for interacting
     with it. E.g. A programming mode may highlight the keywords of a
     programming language and provide functions to easily jump between
     functions, compile and debug it, etc. Org mode, which is the
     major mode for this current buffer, provides functions to
     efficiently organize tasks and more, and it is responsible for
     the highlighting of the headlines, etc.
   - *Major Modes:* There can only be a single major mode active for a
     buffer at any time. Major modes capture the main functionalities
     for working with specific buffer types. E.g. there is c-mode,
     python-mode, text-mode, web-mode, etc. The current buffer is
     displayed under the major-mode /Org-mode/.
   - *Minor Modes:* Minor modes overlay a major-mode with additional
     functionality. Usually they focus on a small and well defined
     add-on functionality. They may provide extra key-bindings for
     inserting templates, or they may offer in-buffer
     completion. E.g. the completion you get in this and other buffers
     while you are typing (it appears when you stop for a moment), is
     realized by the /company/ minor mode.

   The information about the active major and minor modes is
   displayed in the mode line at the bottom of an Emacs window. You
   can hover with your mouse above the different parts of the mode line
   to get information about the elements.

** TODO selecting, copying, and pasting text [0/6]
   Emacs predates the time where the /Cut, Copy & Paste/ expressions
   were coined, and the old command names still are used.
   - [ ] You can *select text* by placing the cursor on the starting
     position and then use the standard key-combo "C-SPC"
     (set-mark-command). The position where you do this is called /the
     mark/. When you now move the cursor you will see that the region
     between the mark and your current position will be
     highlighted. This selected text is called /the region/.
     - you can cancel the selection by using the standard key-combo
       "C-g" (keyboard-quit). Btw: "C-g" is used for cancelling all kinds
       of interactions in Emacs.
   - [ ] *Cutting* text is called /killing text/. You can kill the
     selected region by using the standard key-combo "C-k" (kill-line,
     or similar commands depending on the current mode). Try to kill
     this sentence.
   - [ ] Undo: when changing things, we should also know how to undo them.
     Use the standard key-combo "C-_" (undo) to undo things you did (the command
     is also bound to  "C-/", "C-x u", and other combos for convenience). If
     a region is highlighted when you press undo, only the changes inside of
     that chosen region will get undone.
   - [ ] You can *insert/paste* the killed text somewhere else by moving
     your cursor to the new position and using the standard key-combo
     "C-y" (yank). This action is called /yanking/. Insert your
     killed text here:
   - [ ] If you do not want to cut the text, but you just want to *copy*
     it, you invoke the standard key-combo "M-w" (kill-ring-save) on
     the selected region. This leaves the region as it is, but you can
     insert a copy of it somewhere else with "C-y" as above. above.
   - [ ] When you invoke "C-y" to insert the text, and then follow it
     up by the standard key-combo "M-y" (yank-pop), the inserted text
     will be exchanged against earlier killed text snippets. This way
     you can step through the *history of copied text* pieces. The
     memory where the copied texts are stored is called the
     "kill-ring", and repeatedly using "M-y" steps through it.
   - [ ] an even simpler way to work with the "kill-ring" is to
     use the respective helm command which in this Emacs config is
     mapped to "<f5> k" (helm-show-kill-ring). You will be able to
     quickly narrow down to the desired snippet from your kill history.
     Try it out.

   Emacs has a whole number of other shortcuts to cut text (remember:
   it is called "kill" in Emacs-speak). Here a selection of the
   standard key-combos I find myself using often
   - "C-k" :: Kills the whole line beginning from the cursor position
   - "M-d" :: Kills the text until the end of the word (or the whole
     word if you're in front of it)
   - "M-k" :: Kills up to the end of the sentence.
   All these commands can be invoked repeatedly, and each time the killed
   text will be added to the currently saved text for copying. So, when afterwards
   you execute a yank with "C-y" it will insert the concatenation of these kills.
     
** TODO searching for strings and regular expressions [0/4]
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 23:07]
   :END:
   - [ ] Use the standard key-combo "C-s" (isearch-forward) to do an incremental
     string search forward. Hitting "C-s" again jumps to the next match.
     <RETURN> exits the search, placing the cursor after the current hit.
     - You can get extensive help on isearch by looking up its help page
       using the help lookup combo for it:
        "C-h k C-s" (q.v. [[*What does this key or combo do?][What does this key or combo do?]])
   - [ ] Use the standard key-combo "C-u C-s" (isearch-forward) to do
     an incremental regexp search forward.
   - [ ] The standard key-combos "C-r" and "C-u C-r" do the same in
     backwards direction
   - [ ] One of the best search tools for Emacs uses the helm
     framework and is included in this configuration: [[https://github.com/emacsorphanage/helm-swoop][helm-swoop]]. Use
     "<f5> s" (helm-swoop) to enter a search mode where you see all
     the hits that match your current search expression as you type.
     - while you are searching, you can go to the edit mode (look at
       the window's top line. The command is listed there, "C-c
       C-e"). In edit mode you can change all the lines, and then
       write them back to the buffer.
     - If you use [M-i] while searching (also mentioned in the top line), the search
       will go over all open buffers of this Emacs session.

** TODO Executing Emacs commands and getting information about them [0/4]
   Emacs has a huge number of commands and many of them are not bound to
   key combinations. Such commands can be entered after using the
   standard key combo "M-x". In this configuration we have configured
   the package "smex" which makes the selection of commands much
   easier.

   - [ ] run the command "emacs-version" by using the key-combo "M-x"
     and then entering the command. The fuzzy matching of smex will
     allow you to enter e.g. the initials "ev", or you can type
     "emav", or "emacs-ver". <RETURN> selects the current command.
   - [ ] if you want to get information about a command in smex, you can
     invoke the help system by using the key-combo "C-h f" (describe-function)
     while being in the smex selection dialog.
   - [ ] If you want to get information about a function written in
     the text of an Emacs buffer, you can use the same standard
     key-combo "C-h f" (describe-function) while the cursor is on the
     name of a function. Try it with the one on the next line
     :                emacs-version
     Emacs will offer you the word under the cursor as the default for looking
     up the respective help page.
   - [ ] A very easy way of finding and executing a command is by using the
     helm package that is configured in this Emacs configuration. You
     can invoke the key-combo "<f5> x" (helm-M-x). You can then search
     for Emacs commands, functions, and variables using helms narrowing
     and searching features. Hitting return on the selected command will run it.

* Emacs help and info systems
  Emacs is very consistent in its basic key mappings (stop laughing -
  I really am serious). All basic help functionalities start with the
  standard key-combo "C-h"

** TODO Get help on the current mode [0/2]
   - [ ] Invoke the help for the current buffer's major mode by
     using the standard key-combo "C-h m"
   - [ ] In the course's configuration I included a helm mode for fast
     finding keys of the current mode. This is one of the most
     efficient ways to find out what the current mode can do and what
     keymappings it has. Try the key-combo "<f5> d"
     (helm-descbinds). You now can narrow down to commands.
     Try to find how to "kill" a whole sentence: Just type "kill" and
     "sent" and there you are.
** TODO What does this key or combo do?

   - [ ] To find out what a certain key can do in the current context,
     use the standard key-combo "C-h k". You are then prompted to
     enter the combo you're interested in. Try to find out what is
     mapped to the "C-c C-t" combination, i.e. you have to type "C-h k
     C-c C-t".

** TODO Using the GNU Info system [0/1]
   Emacs documentation is in Info format. Though this is an old
   format, it still is extremely useful and lightweight. Knowing
   info will even help you often on the unix shell, because the
   info manuals are often more reader-friendly. Try out "info date",
   "info bash", or "info libc" on your command line (provided that
   the info pages are installed on the system!)

   - [ ] Enter the info system by using the standard key-combo "C-h i"
     (info). Exit it again by using "q". Maybe it is best, if you open
     a second window (e.g. by doing "C-x 3" to split the current one),
     so that you still can see the instructions below

   These are the key combinations you should try to remember in order
   to navigate info
   - <TAB> :: Jump to the next link
   - <RET> :: visit a link
   - l :: go to the last page you viewed
   - n :: go to the next page
   - p :: go to the previous page
   - u :: go up in the hierarchy
   - t :: go to the top of the current info node
   - d :: go to the top of all info nodes (the info main directory)
   - q :: quit info
   - i :: allows you to search the keyword index of this info file 
   - g :: go to another node. Most useful if you want to go to another
     top node in a file. You need to put the node into parentheses, e.g.
     type: g (emacs). Tab expansion is available

** TODO Get documentation about functions, commands, and variables [0/2]
   Again, all standard key-combos for getting help start with "C-h"
   - [ ] "C-h C-h" :: get help on help. You can leave the help buffer
     by typing "q" for quit     
   - "C-h f" (describe-function) :: get the function documentation of
     an emacs function or interactive command. If point (your cursor)
     is located on a function name, it will already have that function
     preselected as default. Try it by placing your cursor on this and
     then typing "C-h f": describe-function.
   - "C-h v" (describe-variable) :: Same as the previous one for variables.
     E.g. the currently active major modes is stored in a variable. Have
     a look at it: major-mode

   Helm
   - [ ] One of the most powerful ways to get information is by using the
     helm package that is configured in this Emacs configuration. You
     can invoke the key-combo "<f5> a" (helm-apropos). You can then search
     for Emacs commands, functions, variables, and even fonts (called "faces").
     - again, if your cursor is on a name that matches an Emacs
       function or variable, it will be already used as the default
       command. You should see it already chosen as the current
       candidate within the helm session.
     - <RETURN> will jump to the respective help page
     - even better, "C-j" will show the help page while staying in helm mode,
       so you can nicely look up multiple commands one after the other.
   
* Basic Org mode
** TODO Basic folding [0/3]
   SCHEDULED: <2020-06-12 Fri>
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 10:38]
   :END:
   Org mode has the ability to fold all kinds of text structures, e.g.
   - headlines
   - lists
   - a set of structures we will encounter later, like drawers (e.g. the LOGBOOK drawer
     you see in some tasks) and blocks

   Try it out
   - [ ] Go to some headlines and fold/unfold them just using <TAB>
   - [ ] fold and unfold the whole document by using the key-combo "S-<TAB>"
     anywhere in the document (except if you are on a special element, e.g. in
     a list)
   - [ ] go to some items in this list and experiment with the folding
   - test 1
     - test 2
     - test 3
       - test 4

   You may want to read [[info:org#Visibility Cycling][info:org#Visibility Cycling]]

** TODO The usefulness of lists [0/4]
   SCHEDULED: <2020-06-12 Fri>
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 10:39]
   :END:
   
   Org mode started its life as a highly versatile outline editor and
   it is very efficient at keeping information in hierarchical
   lists. The headline hierarchy is one example of this. But there
   also basic lists like the ones I use to write down the exercises in
   this course. Org mode provides powerful commands to compose and
   manipulate lists.

   - [ ] use key-combo "<M-up>" (org-metaup) and key-combo "<M-down>" (org-metadown) 
     to move a list item up and down. You can try it on the test list below the
     exercises.
   - [ ] use key-combo "<M-left>" and "<M-right>" to change the
     hierarchy level of items. If you want to move a whole tree
     including its sub-items, you need to use key-combo "<M-S-right>"
     (org-shiftmetaright) or key-combo "<M-S-left>" (org-shiftmetaleft)
   - [ ] add list items by using the key-combo "<M-Return>" (org-meta-return) at the end
     of a list line
   - [ ] change the list type and list-marker by using the key-combo "<S-left>" (org-shiftleft)
     and "<S-right>" (org-shiftright) on different lines of the following list, and watch how
     this cycles the symbols.
   - [ ] you can mark several lines using the usual "<C-SPACE>" and then move
     the cursor down. With the region highlighted, use "<S-M-right>". This
     moves all the lines you marked one hierarchy level to the right.

   My test list
   - item 1
     - item 1.1
   - item 2
     - item 2.1
     - item 2.2
   - item 3
     - item 3.1
     - item 3.2

** TODO Links in Org mode [0/3]
   SCHEDULED: <2020-06-12 Fri>
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 10:29]
   :END:

   - [ ] You can jump to a link's target using the standard key-combo
     "C-c C-o" (org-open-at-point). Try it out with some of the
     following links.
   - Org recognizes simple links in a text just based on a number
     of string patterns
     - https://orgmode.org/worg/
     - file:/tmp
     - file:~/.emacs.d/init.el
     - [[info:org#Link Format][info:org#Link Format]]  - a link to org's info pages
     - man:grep - org is extensible. This link to a man page works through a definition
       in our [[file:~/.emacs.d/org-init.el::(defun org-man-link-open (lnk)][org-init.el file]]
   - [ ] move your cursor behind one of the links below and press backspace. This will
     delete the closing bracket of the link, and you will see the underlying link syntax
     displayed. When you close the bracket again, Org will only show the description.
     You can just change the description by writing over it. If you want to change the
     underlying link address, see below.
     - Links with descriptions follow this general format. Notice the *two* sets
       of angular brackets
       :       [[LINK][DESCRIPTION]]
       It is also correct to specify a link without a description like this
       :       [[LINK]]
       here are some example links
       - [[https://orgmode.org/worg/][the Worg Website]]
       - [[file:/tmp][my tmp directory]]
       - [[file:~/.emacs.d/init.el][init.el]]
       - [[info:org#Link Format][the info page for the org link format]]  - a link to org's info pages
       - [[* Basic folding]] a link of this structure points to a heading in the present document
   - [ ] The standard key-combo "C-c C-l" (org-insert-link) can be
     used to insert and edit links. When the cursor is on a link, you
     will edit the link. Try it with the previous links

** TODO Some simple Org text markup elements [0/4]
   Org mode offers a number of markup Elements ([[info:org#Emphasis and Monospace][q.v. this info page]]).
   The marking up of text is especially useful when we will export
   our documents to other formats like PDF, HTML, OpenOffice, etc.
   - [ ] test it by writing some bold and italic text. You will note
     that in this emacs configuration you will get two stars when you
     type "*" (multiplication sign) after an empty space. This is in
     expectation that you want to write bold text. These "pair"
     characters behave the same as parentheses, where you already get
     the closing parentheses together with the opening ones.
     - *bold text*
     - /italics/
     - =verbatim=,   =*this is not bold*=
     - _underlined_
     - +ugly strike-through+
   - [ ] *You can write marked up text that contains
     a line break*, but usually this kind of markup is for shorter
     texts, and it may be that the Emacs font setting will fail to
     highlight the text correctly.
   - [ ] You can wrap a piece of text into markers by using the normal
     Emacs way of selecting a region and then hitting one of the markup
     symbols. E.g. for making parts of the following text bold, use
     "<C-SPACE>" at the beginning and the go with the cursor to the
     end (the region will be highlighted). Then hit "*".
     - here: wrap this text in bold
   - [ ] A comment in Org is written by using a '#' at the beginning of a line
     (there may just be spaces before it). Example:
     # a comment
     When an org document is exported, comments are ignored. So, like in
     programming, comments are a nice way to add information to a document
     without their showing up in the final product.

** Org blocks
* Org mode task and agenda System
** TODO Keywords for Task states [0/2]
   :LOGBOOK:
   - State "TODO"       from              [2020-06-11 Thu 16:14]
   :END:
   - by default Org offers *TODO* and *DONE* states, but this can be easily
     adapted in sophisticated ways, as in the present file. At the top of the
     file I defined a line defining different states
     : #+TODO: TODO(t!) WAIT(W@/!) | DONE(d!) CANCELED(c@) DELEGATED-AWAY(G@/!)
     All states to the right of the "|" are final states (DONE states). The
     meanings of the characters in parentheses are discussed towards the end of
     this section.
   - [ ] change the state of a task by using the key-combo "C-c C-t" (org-todo). You
     can be anywhere within the tasks body or on its headline.
     If there are multiple possibilities to which a state can evolve, you will
     be offered a menu.
   - [ ] If you are on char at the beginning of a headline (the initial "*"),
     a number of shortcuts are available. If you hit "t" at this position,
     you will be offered the task state switching as if you had used "C-c C-t".
     Try it out.
   - You can read this info page about more things you can do with TODO states:
      [[info:org#TODO Basics][info:org#TODO Basics]]
   - you can fine-tune the states changes, e.g. whether a change
     should always generate a time stamp, whether it needs a note,
     etc. (details are found in this advanced information:
      [[info:org#Tracking TODO state
      changes][info:org#Tracking TODO state changes)]]. I give a short list here:
     - directives in parentheses: e.g. TODO(t!) WAIT(W@/!)
       + character :: a normal character defines the abbreviation used
         for that state. So, in the example TODO has "t" as its
         shortcut, WAIT has "W"
       + ! :: logs a timestamp for changes to this state
       + @ :: upon changing to this state, asks for a comment
       + /! :: also log a timestamp when leaving the state (if next state does
	 not already involve a timestamp taking)

** TODO Scheduling tasks and deadlines [0/3]
   Org mode can associate times for scheduling tasks. Don't raise your
   Eyebrows - this is not an unnecessary complexity, but an essential
   functionality that many systems are lacking.
   - there is the time when a task needs to be finished. This is the
     *deadline*. This is usually a pretty static timestamp (for most people,
     at least...)
   - but there is also the date/time when you want to work on the task. E.g.
     the deadline may be in two weeks, but I want to work on this next Wednesday,
     so a task manager should offer the notion of expressing this concept.
     This is the *scheduled* time, and it may be changed quite a lot during
     a task's lifetime. If I do not finish the task on Wednesday, I may reschedule
     it for working on it on Friday. But this will not affect the deadline!
   - [ ] Schedule a task. This you can do by using the standard
     key-combo "C-c C-s" while you are in a task. A calendar will be
     displayed. Within this calendar you move by
     - <S-right>, <S-left>, <S-up>, <S-down> :: moves by days
     - <M-S-left>, <M-S-right> :: moves by months
     - <M-S-up>, <M-S-down> :: moves by years
     - <RET> :: selects the date
     -  :: 
     - C-g :: cancels
     But you also just can type at the prompt. Org will try to interpret it in
     the best possible way as a date, and the calendar will adjust. Read about
     this in [[info:org#The date/time prompt][info:org#The date/time prompt]]
   - [ ] take note that after scheduling the task now there is a
     "SCHEDULED:" line added to the task, just below the task's
     headline
   - [ ] add a deadline to the same task by using the standard
     key-combo "C-c C-d" (org-deadline). Take note that as with the
     scheduling, now there is a "DEADLINE" keyword with timestamp
     below the task's headline.
   - [ ] you can create repeating tasks by adding a modifier to a time stamp like
     in these examples
     - [2020-07-10 Fri +7d]
     - [2020-07-10 Fri +2w]
     Go to one of the tasks in this file and schedule it or give it a
     deadline ("C-c C-s" or "C-c C-d").  Then add a repeater modifier
     like in the examples above. When you now resolve the task ("C-c
     C-t" and then chose an end-state like DONE), you will see that
     the task is launched again and the timestamp is shifted by the
     repeater interval.

     You can read more about timestamps in [[info:org#Timestamps][info:org#Timestamps]]

** TODO Changing time stamps [0/5]
   Org uses time stamps in many locations. You saw
   them when scheduling tasks and also when changing
   the state of a task. Org offers a number of nice
   key-mappings to change timestamps fast.

   Active timestamps will show up in the agenda, inactive ones
   will not. For normal texts, it is best to always use the inactive
   timestamps
   - active timestamp: <2020-06-11 Thu 12:30>
   - inactive timestamp: [2020-06-11 Thu 16:38]

   Exercises
   - [ ] go to a timestamp above and modify it. You can position
     the cursor on any part of the date or the time. When you use
     <S-up> or <S-down> the timestamp will be shifted accordingly.
     <S-right> and <S-left> will always move the day.
   - [ ] go to one of your scheduled or deadline timestamps and
     change it like in the previous task
   - [ ] for big changes one may want to use the calendar. Position
     the cursor on a timestamp and use these standard keycombos
     - C-c . :: use calendar (leaves an active timestamp)
     - C-c ! :: use calendar (leaves an inactive timestamp)
   - [ ] the above key-combos can also be used to enter a new timestamp
     anywhere in an org file. Try it.
   - [ ] If you add the prefix argument "C-u" before one of the above
     insertion commands, it will not only create a date timestamp, but
     also add the current time. Try it with the key-combo "C-u C-c !",
     select a date from the offered calendar
     
** TODO Jump to tasks with helm-org
   [[https://emacs-helm.github.io/helm/][Helm]] is a great system for selections. We will meet it later.
   It is included and configured in my course's configuration.

   - [ ] Use the key-combo "<f5> <f5>" (helm-org-agenda-files-headings).
     When you now type characters, the selection options for matching
     tasks will be narrowed down. Use the cursor to go up and down,
     press <RETURN> to select the task to which you want to jump
     
** TODO Display the agenda and navigate within it [0/3]
   - [ ] Use the standard key-combo "C-c a" to get to the agenda
     menu. In the menu choose "a" for "agenda". You will get the
     default view of the agenda, which is the present week. All items
     that have an associated scheduled or deadline time (or an active
     timestamp in the headline) will be displayed in the agenda.
   - [ ] try navigating in the agenda using these keys
     - w :: week view
     - d :: day view
     - f :: forward (by day/week)
     - b :: backward (by day/week)
     - . :: go to today 
     - j :: jump to some date using the calendar
     - g :: rebuild the agenda view
   - [ ] position the cursor on a task in the agenda view and try the
     following different ways to view a task
     - <SPC> :: View task in other window without entering that window
       (you stay in the agenda window)
     - <TAB> :: go to task in other window
     - <RETURN> :: switch to task buffer in this window
   - to get back to the agenda buffer, if you switched to another buffer,
     just use the commands we learned above for switching buffers. E.g.
     the helm way by doing "<f5> b"

** TODO Modify Scheduled times from the agenda view [0/2]
   - [ ] In the agenda view, place the cursor on a task and use
     <S-righ> to shift the scheduled date forward. An information
     about the shifting will be shown in a so called overlay. The
     respective time stamp in the org file will be changed as well. If
     you use the Emacs undo command ("C-_", it is also mapped to other
     keys), the change will be reverted in the agenda as well as in
     the Org file.
   - [ ] Yoi can naturally also just use the standard key-combo "C-c C-s"
     while you are on an agenda taks to change its scheduling, and "C-c C-d"
     if you want to change its deadline.
   - [ ] use "g" to rebuild the view (the overlays vanish)
   - This is the typical workflow you will do in the morning and at
     the end of a day. In the morning, you schedule the tasks you want
     to do on the current day to "today" and work on them. In the
     evening, you can decide to reschedule open tasks to some other
     day.

