#+TODO: TODO(t!) WAIT(W@/!) | DONE(d!) CANCELED(c@) DELEGATED-AWAY(G@/!)
#+TODO: BUG(b!) WRITE(w) | FIXED(f!) WONTFIX(w!)
#+TITLE: Emacs Course 02 - higher productivity

#+AUTHOR: Derek Feichtinger
#+EMAIL: dfeich@gmail.com

# the following property setting is inherited by all org headings
# it is used by an advanced feature for presenting nicer agenda views
# (org-super-agenda)
#+PROPERTY: agenda-group emacs_course

* Org mode tables primer
** Creating Org tables and working with rows and columns [0/6]
   Try the following exercises in the example table, below

   1. [ ] creating a simple table
      If you start a line with a "|" (pipe) sign, org mode  will interpret
      it as a table. Try it.
   
   2. [ ] In a table you can move to the next cell to cell using "<TAB>"
      and to the previous cell with "<S-TAB>". Try it in the test table
      above. If you use <TAB> in the last cell of the table, a new
      row will be added.

   3. [ ] You can move columns and rows by using the M key + a cursor key,
      e.g. "<M-right>" will move a table column to the right.

   4. [ ] You can insert a table column to the left of the current
      column by using the standard key-combo "<S-M-right>"
      (org-shiftmetaright). You can insert a table row above the current
      row by using the standard key-combo "<S-M-down>"
      (org-shiftmetadown).

   5. [ ] You can delete a table column by using the standard
      key-combo "<S-M-left>" (org-shiftmetaleft). Deleting a table row
      is done by using the standard key-combo "<S-M-up>"
      (org-shiftmetaup).

   6. [ ] You can insert a horizontal separation bar by using
      the standard key-combo "C-c -" (org-table-insert-hline).
      Insert a ruler before the "Total" row.


   | Item  | Amount | cost per item | sum | incl VAT |
   |-------+--------+---------------+-----+----------|
   | name1 |      3 |       1500.00 |     |          |
   | name2 |      9 |       4000.00 |     |          |
   | name3 |      4 |       2800.00 |     |          |
   | Total |        |               |     |          |

** simple Org table formulas [0/8] 

   1. [ ] You can add a formula to a table field by
      just writing the definition into the field. Other
      fields are referenced by a row/column syntax like
      @2$4, where this refers to the second row and fourth column.
      Below, I filled in such a definition. When you use
      the standard key-combo "C-c C-c" (org-ctrl-c-ctrl-c) while
      on the table field, the formula will be calculated.      

      | Item  | Amount | cost per item | sum           | incl VAT |
      |-------+--------+---------------+---------------+----------|
      | name1 |      3 |       1500.00 | :=@2$2 * @2$3 |          |
      | name2 |      9 |       4000.00 |               |          |
      | name3 |      4 |       2800.00 |               |          |
      |-------+--------+---------------+---------------+----------|
      | Total |        |               |               |          |

      You will notice, that this adds a line with Meta-Information below
      the table. This is the way that org stores the tables formulas.

      *Note* that, unlike in usual mathematical notation,
      multiplication binds more strongly than division: "a*b/c*d" is
      equivalent to "(a*b)/(c*d)". So, you will have to use
      parentheses if you want "(a*b/c)*d".

   2. [ ] Simplification: If you refer to an item in the same row ,
      you are allowed to drop the row information from the cell
      reference. E.g. the example above could have been done like in
      the example below. Similarly, you may drop the column information
      when refering to cells in the same column.
      
      | Item  | Amount | cost per item | sum           | incl VAT |
      |-------+--------+---------------+---------------+----------|
      | name1 |      3 |       1500.00 | :=$2 * $3     |          |
      | name2 |      9 |       4000.00 |               |          |
      | name3 |      4 |       2800.00 |               |          |
      |-------+--------+---------------+---------------+----------|
      | Total |        |               |               |          |

   3. [ ] You can get the cell address by placing the cursor in a cell
      and then executing the standard key-combo "C-c ?" in that
      cell. The cell's address will be displayed in the mini-buffer.
      Try it in one of the tables.

   4. [ ] You can enter the *table editor* by using the standard
      key-combo "C-c '" (org-edit-special) while having the cursor
      placed in a table. You can now edit the equations, add
      additional equations and the matching table cells even get
      highlighted when you move across the equation. You can leave the
      editor either by "C-c C-c" (saves the changes) or by "C-c C-q"
      to quit without saving. Try it in the following table
      
      | Item  | Amount | cost per item |   sum | incl VAT |
      |-------+--------+---------------+-------+----------|
      | name1 |      3 |       1500.00 | 4500. |   4846.5 |
      | name2 |      9 |       4000.00 |       |          |
      | name3 |      4 |       2800.00 |       |          |
      |-------+--------+---------------+-------+----------|
      | Total |        |               |       |          |
      #+TBLFM: @2$4=$2 * $3::@2$5=$4 * 1.077

   5. [ ] You can use cell ranges in functions by defining a range
      like "@2$4..@4$4." Look at the example below. You can execute
      the table formula by going to the TBLFM row below the table and
      executing the standard key-combo "C-c C-c" (org-ctrl-c-ctrl-c)
      on it. Another way to recalculate the whole table is to
      issue the standard emacs command "org-table-recalculate".
      
      | Item  | Amount | cost per item | sum | incl VAT |
      |-------+--------+---------------+-----+----------|
      | name1 |      3 |       1500.00 |     |          |
      | name2 |      9 |       4000.00 |     |          |
      | name3 |      4 |       2800.00 |     |          |
      |-------+--------+---------------+-----+----------|
      | Total |        |               |     |          |
      #+TBLFM: @2$4..@4$4=$2 * $3::@2$5..@4$5=$4 * 1.077

   6. [ ] We can use another range function to get the sums
      in the two fields of the "Total" row. The sum
      is obtained by using Calc's "vsum" function (vector
      sum) in the formula. Use "C-c C-c" on the TBLFM row
      to calculate the table.
 
      | Item  | Amount | cost per item | sum | incl VAT |
      |-------+--------+---------------+-----+----------|
      | name1 |      3 |       1500.00 |     |          |
      | name2 |      9 |       4000.00 |     |          |
      | name3 |      4 |       2800.00 |     |          |
      |-------+--------+---------------+-----+----------|
      | Total |        |               |     |          |
      #+TBLFM: @2$4..@4$4=$2 * $3::@2$5..@4$5=$4 * 1.077::@5$4..@5$5=vsum(@2..@4)

   7. [ ] Simplification: If you want to refer to the last row or last
      column you can use @> or $> instead of the numeric value.
      Similarly, the first row and column can be referred to as @< and
      $<, respectively. This makes it easier to write many formulas.

      | Item  | Amount | cost per item | sum | incl VAT |
      |-------+--------+---------------+-----+----------|
      | name1 |      3 |       1500.00 |     |          |
      | name2 |      9 |       4000.00 |     |          |
      | name3 |      4 |       2800.00 |     |          |
      |-------+--------+---------------+-----+----------|
      | Total |        |               |     |          |
      #+TBLFM: @2$4..@4$4=$2 * $3::@2$5..@4$5=$4 * 1.077::@>$4..@>$5=vsum(@2..@4)

   8. [ ] Simplification: You can refer to all the rows between to
      horizontal separator lines (hlines) by specifying a range using
      the roman numerals like this: @I..@II (all rows between the
      first and second hline), @I..@III (all rows between the first
      and third hline), etc. The above table then can be
      written as
      
      | Item  | Amount | cost per item | sum | incl VAT |
      |-------+--------+---------------+-----+----------|
      | name1 |      3 |       1500.00 |     |          |
      | name2 |      9 |       4000.00 |     |          |
      | name3 |      4 |       2800.00 |     |          |
      |-------+--------+---------------+-----+----------|
      | Total |        |               |     |          |
      #+TBLFM: @2$4..@4$4=$2 * $3::@2$5..@4$5=$4 * 1.077::@>$4..@>$5=vsum(@I..@II)

      Note that the syntax using @I, @II can only be used on the
      right hand side of an equation. So, regrettably we cannot
      write something like this
      :  @I$4..@II$4=$2 * $3

      You can get more information at [[info:org#Field and range formulas][info:org#Field and range formulas]]

   9. Simplification: If all fields of a column except the table
      header should have the same formula, you can use a so-called
      column formula.
      : $4 = $2 * $3
      If a cell is defined by both a column formula and a normal
      field/range formula, the field/range formula wins.
      You can read more at [[info:org#Column formulas][info:org#Column formulas]]

      | Item  | Amount | cost per item | sum | incl VAT |
      |-------+--------+---------------+-----+----------|
      | name1 |      3 |       1500.00 |     |          |
      | name2 |      9 |       4000.00 |     |          |
      | name3 |      4 |       2800.00 |     |          |
      |-------+--------+---------------+-----+----------|
      | Total |        |               |     |          |
      #+TBLFM: $4=$2 * $3::$5=$4 * 1.077::@>$4..@>$5=vsum(@I..@II)

   10. Formatting: Numbers can be formatted by adding a
       C style formatting specifyer after a semicolon, e.g.
       : @>$4..@>$5=vsum(@I..@II);%.2f

       | Item  | Amount | cost per item | sum | incl VAT |
       |-------+--------+---------------+-----+----------|
       | name1 |      3 |       1500.00 |     |          |
       | name2 |      9 |       4000.00 |     |          |
       | name3 |      4 |       2800.00 |     |          |
       |-------+--------+---------------+-----+----------|
       | Total |        |               |     |          |
       #+TBLFM: $4=$2 * $3;%.2f::$5=$4 * 1.077;%.2f::@>$4..@>$5=vsum(@I..@II);%.2f

      

   
* Orb Babel first steps
  One of the most versatile features of Org mode is its ability to
  use blocks of source code. It actually implements a literate
  programming environment (q.v.  [[http://www.literateprogramming.com/knuthweb.pdf][Donald Knuth's seminal paper]] from 1984
  and this nice article: [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][Literate Programming: Empower Your Writing with Emacs Org-Mode]])

** preconditions
   To use a particular programming language with org mode it must be configured
   in the variable =org-babel-do-load-languages=. In the course configuration
   I have done that for many languages already.
   A list of supported languages is given at the [[https://orgmode.org/worg/org-contrib/babel/languages.html][Worg site]].
   
** first steps with shell scripts [0/4]

   1. [ ] Below you see a first simple source block. You can execute the
      block by positioning the cursor within and then using
      the standard key-combo "C-c C-c" that we already know from
      before.

      #+begin_src bash 
      echo "hello world I'm finally here"
      #+end_src 

      You are asked whether you really want to execute
      the block, and the results get inserted below the block
      
   2. [ ] The easy way to insert a block without having to type all
      the boilerplate is to use the standard key-combo "C-c C-,"
      (org-insert-structure-template) followed by "s" for a source block.
      Try it right here.

   3. [ ] Changing the result type.
      Execute the following source block
      
      #+begin_src bash 
      echo "hello world I'm finally here"
      echo "hello world I'm finally here"
      #+end_src 

      So, this ended up as a table! Why? Org provides a number
      of options of how it should interpret the results (and what
      actually constitutes the result). You can steer this explicitely
      using the :results argument.

      #+begin_src bash :results verbatim
      echo "hello world I'm finally here"
      echo "hello world I'm finally here"
      #+end_src 

      #+begin_src bash :results table
      echo "hello world I'm finally here"
      echo "hello world I'm finally here"
      #+end_src

            #+begin_src bash :results list
      echo "hello world I'm finally here"
      echo "hello world I'm finally here"
      #+end_src 

   4. [ ] The best way to edit a code block in a native language environment
      is to use the standard key-combo "C-c '" (org-edit-special). This will
      open the code in a separate buffer with the correct language mode. When
      done you can switch back using again "C-c '" or you may cancel all edits
      by doing "C-c C-k" (it's actually written in the top line of the buffer).
      Try it with this block

      #+begin_src bash
	while read a b c; do
	    echo $a $b $c
	done <<EOF
	1 2 3
	A B C
	x y z
	EOF
      #+end_src

   5. Defining the execution directory. You can use the :dir flag to define at which path the commands
      should be executed
      #+begin_src bash :results verbatim
	hostname
	pwd
      #+end_src

      #+begin_src bash :results verbatim :dir /tmp
	hostname
	pwd
      #+end_src

      Note: this feature is most powerful if you combine it with
      Emacs' great TRAMP feature for accessing remote hosts. E.g.
      using :dir /ssh:user@somehost.test.org:/tmp. Try it with
      a host that you can reach
      
      #+begin_src bash :results verbatim :dir /ssh:myhost.site.org:/tmp
	hostname
	pwd
      #+end_src
	
** TODO sessions

** creating graphics [0/2]

   1. [ ] Creating a graph with graphviz. Execute the following code block. The result will
      be an org link to the produced PNG file. It's name is defined in the :file argument
      of the org block.
      
      #+BEGIN_SRC dot :file /tmp/example1.png
       digraph { 

         node [shape=circle,fontsize=8,fixedsize=true,width=0.9]; 
         edge [fontsize=8]; 
         rankdir=LR;

         "low-priority" [shape="doublecircle" color="orange"];
         "high-priority" [shape="doublecircle" color="orange"];

         "s1" -> "low-priority";
         "s2" -> "low-priority";
         "s3" -> "low-priority";

         "low-priority" -> "s4";
         "low-priority" -> "s5";
         "low-priority" -> "high-priority" [label="wait-time exceeded"];

         "high-priority" -> "s4";
         "high-priority" -> "s5";

       }
      #+END_SRC
     
      In order to display that link as an inline image, you just need
      to toggle Org's inline image setting by using the standard
      key-combo "C-c C-x C-v" (org-toggle-inline-images).

   2. [ ] Creating a graph with python. In python blocks we have to define that the result will
      be a file link. Org will wrap the code into a function and use the string received
      from the =return= statement for the link address. Take a look at this example
      #+begin_src python :results file
	import matplotlib, numpy
	matplotlib.use('Agg')
	import matplotlib.pyplot as plt
	outfile='/tmp/python3-example1.png'
	fig=plt.figure(figsize=(4,2))
	x=numpy.linspace(-15,15)
	plt.plot(numpy.sin(x)/x)
	fig.tight_layout()
	plt.savefig(outfile)
	return outfile # return filename to org-mode
      #+end_src

** Inputting variables, tables, other source blocks into babel

   1. Using a table with an SQL source block
      #+NAME: table1
      | col1 | col2 | col3 |
      |------+------+------|
      |    5 |   25 |      |
      |    6 |   30 |      |
      |    7 |   35 |      |
      |    8 |   40 |      |
      |    9 |   45 |      |
      |   10 |   50 |      |
      |   11 |   55 |      |
      |   12 |   60 |      |
      |   13 |   65 |      |
      |   14 |   70 |      |
      |   15 |   75 |      |

      It is necessary to create the explicit table definition. The table can be
      read in via the *.import* function.

      #+BEGIN_SRC sqlite :db /tmp/example.sqlite :var tbl=table1
	drop table if exists t1;
	create table t1 (col1 INTEGER, col2 INTEGER, col3 INTEGER);
	.import "$tbl" t1
	select count(*) from t1;
      #+END_SRC

      
      #+BEGIN_SRC sqlite :db /tmp/example.sqlite :colnames yes
	UPDATE t1 SET col3 = 2 * col2;
	SELECT * FROM t1;
      #+END_SRC
